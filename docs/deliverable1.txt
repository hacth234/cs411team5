
Idea 1 Based on Feedback from Discussion:
Spotify Lyrics app
API: Twitter API, Spotify API, Musixmatch API
The idea is for a web app where users login with their Spotify accounts (via 
Facebook, Google, Apple, etc). Using twitter api we can grab the mood of the person
based on the person's tweets. Then from spotify api we can grab playlists that
represent that mood, somehow with a database of happy or sad or motivational list
of songs. The app would then display the lyrics of the current song 
that the user is listening to from the playlist. 
It would be like a karoake app where users can sing
along to the song they are listening to. Using the Spotify API the app would know 
which song, and using the Musixmatch API, it would know the lyrics for the
corresponding song.



Idea 2:
Recipe Suggestions app
API: Edamam recipe search API, TheMealDB API, possibly Bon Appetit API
The goal and functionality of the recipe suggestions app would be very similar to IBM's
ill-fated Chef Watson, albeit with a considerably more limited scope. Upon startup, the
app would ask users to input the ingredients that the user has on hand (i.e. in their
refridgerator, in their pantry). Using both the Edamam recipe search API and TheMealDB
API, the application would provide a list of recipe suggestions that include and use the
user-inputted ingredients. Further functionality would include the ability to star/like
recipes for future reference and the ability to "quick-select" previous ingredients
(ingredients history). Users would be able to sign into the application with Facebook,
Google, or other popular third-party sign-on options. The application's database would
then store, the login information, the user's ingredient history, recipe history, and
so forth.


Idea 3:
BU class review web application
The goal of the web application would be to create a comprehensive destination 
for all information related to classes. Unlike RateMyProfessor, the website 
would be centered around information about the classes. Students who have been 
confirmed to have taken the class would anonymously upload reviews of the 
class and the professor. Other than reviews for individual classes, the site 
could also give advice on what courses to take when, as well as on courseload. 
In our database, we would store class and teacher information, reviews, as well 
as user information. We could use the RateMyProfessor API as well as Reddit API 
to include user information from other sources about the class and the professor. 
We would display the ratings of the professors that have taught the class as well 
as snippets of text from Reddit comments and posts on the class. For third party 
identification, we could use Facebook and Google



Idea 4:
Pet babysit app
API: pet facts api, google map api, Twitter api.  
The purpose of this app is to match pet owners with pet sitters. On startup, this app will 
prompt the user to login in with Twitter or Facebook using OAuth. Next, the user got to choose 
whether they are a pet owner/pet sitter. Pet owners will upload a picture of their pet, along 
with a short description. This information will be shown to pet sitters nearby(within a radius 
by user input), who can then choose which pet they want to take care of. We could also use the 
Twitter api to get a user's Twitter timeline, try to anaylze this person's pet preference and 
make more accurate pet suggestions. In our database, we will store users' babysit record, their 
pet preference, and whether they had any bad behaviors such as pet abuse. Users being reported 
for too many times will be temporarily or maybe permanently banned from pet sitting. In addition 
to match pet owner with pet babysitter, this app will also provide some pets facts to help people 
better taking care of theirpets. By pulling data from pet facts api, we can show the corresponding 
pet facts to pet owners and sitters depending on their pet type.



Idea 5:
Corona Nearby app 
(data)API: https://covidtracking.com/data/api, google news api and locational api.
https://developers.google.com/android/exposure-notifications/exposure-notifications-api?p=exposure_notifications_update&visit_id=637491235178403741-4012966233&rd=2
Third party OAuth: facebook, google, etc.

Using the corona tracking api we can pull data from covid tracking api. Using this information
we can pull information about the places and how severe the covid is in that area.
We can then also use locational tracking api based on giving your OAuth data from
facebook or google whether you have been into these exposed area or not. Prompting 
user to give permission to use locational data comes first. We can use firebase to
handle storing future locational footprint for the user that gave by cross referencing
use a newly made cookie for the user and the OAuth sign in. Doing all this we can give an
indicator in the app for the user's own threat level and surrouding threat level on google maps.

